// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Net;

namespace Facility.Core.Http
{
	/// <summary>
	/// Common service errors.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public static partial class HttpServiceErrors
	{
		/// <summary>
		/// Gets the HTTP status code that corresponds to the specified error code.
		/// </summary>
		public static HttpStatusCode? TryGetHttpStatusCode(string errorCode) =>
			s_errorToStatus.TryGetValue(errorCode, out var statusCode) ? (HttpStatusCode?) statusCode : null;

		/// <summary>
		/// Gets the error code that corresponds to the specified HTTP status code.
		/// </summary>
		public static string TryGetErrorCode(HttpStatusCode statusCode)
		{
			switch ((int) statusCode)
			{
				case 304: return ServiceErrors.NotModified;
				case 400: return ServiceErrors.InvalidRequest;
				case 401: return ServiceErrors.NotAuthenticated;
				case 403: return ServiceErrors.NotAuthorized;
				case 404: return ServiceErrors.NotFound;
				case 409: return ServiceErrors.Conflict;
				case 413: return ServiceErrors.RequestTooLarge;
				case 429: return ServiceErrors.TooManyRequests;
				case 500: return ServiceErrors.InternalError;
				case 503: return ServiceErrors.ServiceUnavailable;
				default: return null;
			}
		}

		private static readonly IReadOnlyDictionary<string, int> s_errorToStatus = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase)
		{
			[ServiceErrors.InvalidRequest] = 400,
			[ServiceErrors.InternalError] = 500,
			[ServiceErrors.InvalidResponse] = 500,
			[ServiceErrors.ServiceUnavailable] = 503,
			[ServiceErrors.Timeout] = 500,
			[ServiceErrors.NotAuthenticated] = 401,
			[ServiceErrors.NotAuthorized] = 403,
			[ServiceErrors.NotFound] = 404,
			[ServiceErrors.NotModified] = 304,
			[ServiceErrors.Conflict] = 409,
			[ServiceErrors.TooManyRequests] = 429,
			[ServiceErrors.RequestTooLarge] = 413,
		};
	}
}
