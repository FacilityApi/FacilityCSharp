// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using Facility.Core;

namespace Facility.ConformanceApi
{
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	internal static class ConformanceApiMethods
	{
		public static readonly IServiceMethodInfo GetApiInfo =
			ServiceMethodInfo.Create<IConformanceApi, GetApiInfoRequestDto, GetApiInfoResponseDto>(
				"getApiInfo", "ConformanceApi", x => x.GetApiInfoAsync);

		public static readonly IServiceMethodInfo GetWidgets =
			ServiceMethodInfo.Create<IConformanceApi, GetWidgetsRequestDto, GetWidgetsResponseDto>(
				"getWidgets", "ConformanceApi", x => x.GetWidgetsAsync);

		public static readonly IServiceMethodInfo CreateWidget =
			ServiceMethodInfo.Create<IConformanceApi, CreateWidgetRequestDto, CreateWidgetResponseDto>(
				"createWidget", "ConformanceApi", x => x.CreateWidgetAsync);

		public static readonly IServiceMethodInfo GetWidget =
			ServiceMethodInfo.Create<IConformanceApi, GetWidgetRequestDto, GetWidgetResponseDto>(
				"getWidget", "ConformanceApi", x => x.GetWidgetAsync);

		public static readonly IServiceMethodInfo DeleteWidget =
			ServiceMethodInfo.Create<IConformanceApi, DeleteWidgetRequestDto, DeleteWidgetResponseDto>(
				"deleteWidget", "ConformanceApi", x => x.DeleteWidgetAsync);

		public static readonly IServiceMethodInfo GetWidgetBatch =
			ServiceMethodInfo.Create<IConformanceApi, GetWidgetBatchRequestDto, GetWidgetBatchResponseDto>(
				"getWidgetBatch", "ConformanceApi", x => x.GetWidgetBatchAsync);

		public static readonly IServiceMethodInfo MirrorFields =
			ServiceMethodInfo.Create<IConformanceApi, MirrorFieldsRequestDto, MirrorFieldsResponseDto>(
				"mirrorFields", "ConformanceApi", x => x.MirrorFieldsAsync);

		public static readonly IServiceMethodInfo CheckQuery =
			ServiceMethodInfo.Create<IConformanceApi, CheckQueryRequestDto, CheckQueryResponseDto>(
				"checkQuery", "ConformanceApi", x => x.CheckQueryAsync);

		public static readonly IServiceMethodInfo CheckPath =
			ServiceMethodInfo.Create<IConformanceApi, CheckPathRequestDto, CheckPathResponseDto>(
				"checkPath", "ConformanceApi", x => x.CheckPathAsync);

		public static readonly IServiceMethodInfo MirrorHeaders =
			ServiceMethodInfo.Create<IConformanceApi, MirrorHeadersRequestDto, MirrorHeadersResponseDto>(
				"mirrorHeaders", "ConformanceApi", x => x.MirrorHeadersAsync);

		public static readonly IServiceMethodInfo Mixed =
			ServiceMethodInfo.Create<IConformanceApi, MixedRequestDto, MixedResponseDto>(
				"mixed", "ConformanceApi", x => x.MixedAsync);

		public static readonly IServiceMethodInfo Required =
			ServiceMethodInfo.Create<IConformanceApi, RequiredRequestDto, RequiredResponseDto>(
				"required", "ConformanceApi", x => x.RequiredAsync);

		public static readonly IServiceMethodInfo MirrorBytes =
			ServiceMethodInfo.Create<IConformanceApi, MirrorBytesRequestDto, MirrorBytesResponseDto>(
				"mirrorBytes", "ConformanceApi", x => x.MirrorBytesAsync);

		public static readonly IServiceMethodInfo MirrorText =
			ServiceMethodInfo.Create<IConformanceApi, MirrorTextRequestDto, MirrorTextResponseDto>(
				"mirrorText", "ConformanceApi", x => x.MirrorTextAsync);

		public static readonly IServiceMethodInfo BodyTypes =
			ServiceMethodInfo.Create<IConformanceApi, BodyTypesRequestDto, BodyTypesResponseDto>(
				"bodyTypes", "ConformanceApi", x => x.BodyTypesAsync);

		public static readonly IServiceEventInfo Fibonacci =
			ServiceEventInfo.Create<IConformanceApi, FibonacciRequestDto, FibonacciResponseDto>(
				"fibonacci", "ConformanceApi", x => x.FibonacciAsync);
	}
}
