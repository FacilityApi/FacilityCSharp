// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core;

namespace Facility.ConformanceApi
{
	/// <summary>
	/// A delegating implementation of ConformanceApi.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public partial class DelegatingConformanceApi : IConformanceApi
	{
		/// <summary>
		/// Creates an instance with the specified service delegate.
		/// </summary>
		public DelegatingConformanceApi(ServiceDelegate serviceDelegate) =>
			m_serviceDelegate = serviceDelegate ?? throw new ArgumentNullException(nameof(serviceDelegate));

		/// <summary>
		/// Creates an instance with the specified delegator.
		/// </summary>
		[Obsolete("Use the constructor that accepts a ServiceDelegate.")]
		public DelegatingConformanceApi(ServiceDelegator delegator) =>
			m_serviceDelegate = ServiceDelegate.FromDelegator(delegator);

		/// <summary>
		/// Gets API information.
		/// </summary>
		public virtual async Task<ServiceResult<GetApiInfoResponseDto>> GetApiInfoAsync(GetApiInfoRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.GetApiInfo, request, cancellationToken).ConfigureAwait(false)).Cast<GetApiInfoResponseDto>();

		/// <summary>
		/// Gets widgets.
		/// </summary>
		public virtual async Task<ServiceResult<GetWidgetsResponseDto>> GetWidgetsAsync(GetWidgetsRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.GetWidgets, request, cancellationToken).ConfigureAwait(false)).Cast<GetWidgetsResponseDto>();

		/// <summary>
		/// Creates a new widget.
		/// </summary>
		public virtual async Task<ServiceResult<CreateWidgetResponseDto>> CreateWidgetAsync(CreateWidgetRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.CreateWidget, request, cancellationToken).ConfigureAwait(false)).Cast<CreateWidgetResponseDto>();

		/// <summary>
		/// Gets the specified widget.
		/// </summary>
		public virtual async Task<ServiceResult<GetWidgetResponseDto>> GetWidgetAsync(GetWidgetRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.GetWidget, request, cancellationToken).ConfigureAwait(false)).Cast<GetWidgetResponseDto>();

		/// <summary>
		/// Deletes the specified widget.
		/// </summary>
		public virtual async Task<ServiceResult<DeleteWidgetResponseDto>> DeleteWidgetAsync(DeleteWidgetRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.DeleteWidget, request, cancellationToken).ConfigureAwait(false)).Cast<DeleteWidgetResponseDto>();

		/// <summary>
		/// Gets the specified widgets.
		/// </summary>
		public virtual async Task<ServiceResult<GetWidgetBatchResponseDto>> GetWidgetBatchAsync(GetWidgetBatchRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.GetWidgetBatch, request, cancellationToken).ConfigureAwait(false)).Cast<GetWidgetBatchResponseDto>();

		public virtual async Task<ServiceResult<MirrorFieldsResponseDto>> MirrorFieldsAsync(MirrorFieldsRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.MirrorFields, request, cancellationToken).ConfigureAwait(false)).Cast<MirrorFieldsResponseDto>();

		public virtual async Task<ServiceResult<CheckQueryResponseDto>> CheckQueryAsync(CheckQueryRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.CheckQuery, request, cancellationToken).ConfigureAwait(false)).Cast<CheckQueryResponseDto>();

		public virtual async Task<ServiceResult<CheckPathResponseDto>> CheckPathAsync(CheckPathRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.CheckPath, request, cancellationToken).ConfigureAwait(false)).Cast<CheckPathResponseDto>();

		public virtual async Task<ServiceResult<MirrorHeadersResponseDto>> MirrorHeadersAsync(MirrorHeadersRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.MirrorHeaders, request, cancellationToken).ConfigureAwait(false)).Cast<MirrorHeadersResponseDto>();

		public virtual async Task<ServiceResult<MixedResponseDto>> MixedAsync(MixedRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.Mixed, request, cancellationToken).ConfigureAwait(false)).Cast<MixedResponseDto>();

		public virtual async Task<ServiceResult<RequiredResponseDto>> RequiredAsync(RequiredRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.Required, request, cancellationToken).ConfigureAwait(false)).Cast<RequiredResponseDto>();

		public virtual async Task<ServiceResult<MirrorBytesResponseDto>> MirrorBytesAsync(MirrorBytesRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.MirrorBytes, request, cancellationToken).ConfigureAwait(false)).Cast<MirrorBytesResponseDto>();

		public virtual async Task<ServiceResult<MirrorTextResponseDto>> MirrorTextAsync(MirrorTextRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.MirrorText, request, cancellationToken).ConfigureAwait(false)).Cast<MirrorTextResponseDto>();

		public virtual async Task<ServiceResult<BodyTypesResponseDto>> BodyTypesAsync(BodyTypesRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(ConformanceApiMethods.BodyTypes, request, cancellationToken).ConfigureAwait(false)).Cast<BodyTypesResponseDto>();

		public virtual async Task<ServiceResult<IAsyncEnumerable<ServiceResult<FibonacciResponseDto>>>> FibonacciAsync(FibonacciRequestDto request, CancellationToken cancellationToken = default)
		{
			var result = await m_serviceDelegate.InvokeEventAsync(ConformanceApiMethods.Fibonacci, request, cancellationToken).ConfigureAwait(false);
			return result.IsFailure ? result.ToFailure() : ServiceResult.Success(Enumerate(result.Value, cancellationToken));

			static async IAsyncEnumerable<ServiceResult<FibonacciResponseDto>> Enumerate(IAsyncEnumerable<ServiceResult<ServiceDto>> enumerable, [EnumeratorCancellation] CancellationToken cancellationToken)
			{
				await foreach (var result in enumerable.WithCancellation(cancellationToken))
					yield return result.Cast<FibonacciResponseDto>();
			}
		}

		private readonly ServiceDelegate m_serviceDelegate;
	}
}
