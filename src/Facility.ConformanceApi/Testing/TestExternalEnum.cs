// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Facility.Core;
using Facility.Core.MessagePack;

namespace Facility.ConformanceApi.External
{
	/// <summary>
	/// One of three answers.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	[Newtonsoft.Json.JsonConverter(typeof(ExternalAnswerJsonConverter))]
	[System.Text.Json.Serialization.JsonConverter(typeof(ExternalAnswerSystemTextJsonConverter))]
	[MessagePack.MessagePackFormatter(typeof(ExternalAnswerMessagePackFormatter))]
	public partial struct TestExternalEnum : IEquatable<TestExternalEnum>
	{
		/// <summary>
		/// Affirmative.
		/// </summary>
		public static readonly TestExternalEnum Yes = new TestExternalEnum(Strings.Yes);

		/// <summary>
		/// Negative.
		/// </summary>
		public static readonly TestExternalEnum No = new TestExternalEnum(Strings.No);

		/// <summary>
		/// Unknown.
		/// </summary>
		public static readonly TestExternalEnum Maybe = new TestExternalEnum(Strings.Maybe);

		/// <summary>
		/// Creates an instance.
		/// </summary>
		public TestExternalEnum(string value) => m_value = value;

		/// <summary>
		/// Converts the instance to a string.
		/// </summary>
		public override string ToString() => m_value != null && s_valueCache.TryGetValue(m_value, out var cachedValue) ? cachedValue : m_value ?? "";

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public bool Equals(TestExternalEnum other) => StringComparer.OrdinalIgnoreCase.Equals(m_value ?? "", other.m_value ?? "");

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public override bool Equals(object? obj) => obj is TestExternalEnum && Equals((TestExternalEnum) obj);

		/// <summary>
		/// Gets the hash code.
		/// </summary>
		public override int GetHashCode() => StringComparer.OrdinalIgnoreCase.GetHashCode(m_value ?? "");

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public static bool operator ==(TestExternalEnum left, TestExternalEnum right) => left.Equals(right);

		/// <summary>
		/// Checks for inequality.
		/// </summary>
		public static bool operator !=(TestExternalEnum left, TestExternalEnum right) => !left.Equals(right);

		/// <summary>
		/// Returns true if the instance is equal to one of the defined values.
		/// </summary>
		public bool IsDefined() => m_value != null && s_valueCache.ContainsKey(m_value);

		/// <summary>
		/// Returns all of the defined values.
		/// </summary>
		public static IReadOnlyList<TestExternalEnum> GetValues() => s_values;

		/// <summary>
		/// Provides string constants for defined values.
		/// </summary>
		public static class Strings
		{
			/// <summary>
			/// Affirmative.
			/// </summary>
			public const string Yes = "yes";

			/// <summary>
			/// Negative.
			/// </summary>
			public const string No = "no";

			/// <summary>
			/// Unknown.
			/// </summary>
			public const string Maybe = "maybe";
		}

		/// <summary>
		/// Used for serialization.
		/// </summary>
		public sealed class ExternalAnswerJsonConverter : ServiceEnumJsonConverter<TestExternalEnum>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override TestExternalEnum CreateCore(string value) => new TestExternalEnum(value);
		}

		/// <summary>
		/// Used for serialization.
		/// </summary>
		public sealed class ExternalAnswerSystemTextJsonConverter : ServiceEnumSystemTextJsonConverter<TestExternalEnum>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override TestExternalEnum CreateCore(string value) => new TestExternalEnum(value);
		}

		/// <summary>
		/// Used for serialization.
		/// </summary>
		public sealed class ExternalAnswerMessagePackFormatter : ServiceEnumMessagePackFormatter<TestExternalEnum>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override TestExternalEnum CreateCore(string value) => new TestExternalEnum(value);
		}

		private static readonly ReadOnlyCollection<TestExternalEnum> s_values = new ReadOnlyCollection<TestExternalEnum>(
			new[]
			{
				Yes,
				No,
				Maybe,
			});

		private static readonly IReadOnlyDictionary<string, string> s_valueCache = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
		{
			{ Strings.Yes, Strings.Yes },
			{ Strings.No, Strings.No },
			{ Strings.Maybe, Strings.Maybe },
		};

		private readonly string m_value;
	}
}
