// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Facility.Core;
using Facility.Core.MessagePack;

namespace Facility.ConformanceApi
{
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	[MessagePack.MessagePackObject]
	public sealed partial class AnyNullableDto : ServiceDto<AnyNullableDto>
	{
		/// <summary>
		/// Creates an instance.
		/// </summary>
		public AnyNullableDto()
		{
		}

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<string?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("string")]
		public ServiceNullable<string?> String { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<bool?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("boolean")]
		public ServiceNullable<bool?> Boolean { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<double?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("double")]
		public ServiceNullable<double?> Double { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<int?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("int32")]
		public ServiceNullable<int?> Int32 { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<long?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("int64")]
		public ServiceNullable<long?> Int64 { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<decimal?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("decimal")]
		public ServiceNullable<decimal?> Decimal { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<DateTime?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("datetime")]
		public ServiceNullable<DateTime?> Datetime { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<byte[]?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("bytes")]
		public ServiceNullable<byte[]?> Bytes { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<ServiceObject?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("object")]
		public ServiceNullable<ServiceObject?> Object { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<ServiceErrorDto?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("error")]
		public ServiceNullable<ServiceErrorDto?> Error { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<AnyDto?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("data")]
		public ServiceNullable<AnyDto?> Data { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<Answer?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("enum")]
		public ServiceNullable<Answer?> Enum { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<IReadOnlyList<int>?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("array")]
		public ServiceNullable<IReadOnlyList<int>?> Array { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<IReadOnlyDictionary<string, int>?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("map")]
		public ServiceNullable<IReadOnlyDictionary<string, int>?> Map { get; set; }

		[Newtonsoft.Json.JsonProperty(DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Include)]
		[ServiceNullableDefaultValueAttribute(typeof(ServiceNullable<ServiceResult<int>?>))]
		[System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
		[MessagePack.Key("result")]
		public ServiceNullable<ServiceResult<int>?> Result { get; set; }

		/// <summary>
		/// The JSON serializer.
		/// </summary>
		protected override JsonServiceSerializer JsonSerializer => SystemTextJsonServiceSerializer.Instance;

		/// <summary>
		/// Determines if two DTOs are equivalent.
		/// </summary>
		public override bool IsEquivalentTo(AnyNullableDto? other)
		{
			return other != null &&
				String == other.String &&
				Boolean == other.Boolean &&
				Double == other.Double &&
				Int32 == other.Int32 &&
				Int64 == other.Int64 &&
				Decimal == other.Decimal &&
				Datetime == other.Datetime &&
				Bytes == other.Bytes &&
				Object == other.Object &&
				Error == other.Error &&
				Data == other.Data &&
				Enum == other.Enum &&
				Array == other.Array &&
				Map == other.Map &&
				Result == other.Result;
		}
	}
}
