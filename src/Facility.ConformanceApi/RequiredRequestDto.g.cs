// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Facility.Core;
using MessagePack;
using ProtoBuf;

namespace Facility.ConformanceApi
{
	/// <summary>
	/// Request for Required.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	[ProtoContract]
	[MessagePackObject]
	public sealed partial class RequiredRequestDto : ServiceDto<RequiredRequestDto>
	{
		/// <summary>
		/// Creates an instance.
		/// </summary>
		public RequiredRequestDto()
		{
		}

		[ProtoMember(1)]
		[Key(0)]
		public string? Query { get; set; }

		[ProtoMember(2)]
		[Key(1)]
		public string? Normal { get; set; }

		[ProtoMember(3)]
		[Key(2)]
		public WidgetDto? Widget { get; set; }

		[ProtoMember(4)]
		[Key(3)]
		public IReadOnlyList<WidgetDto>? Widgets { get; set; }

		[ProtoMember(5)]
		[Key(4)]
		public IReadOnlyList<IReadOnlyList<WidgetDto>>? WidgetMatrix { get; set; }

		[ProtoMember(6)]
		[Key(5)]
		public ServiceResult<WidgetDto>? WidgetResult { get; set; }

		[ProtoMember(7)]
		[Key(6)]
		public IReadOnlyList<ServiceResult<WidgetDto>>? WidgetResults { get; set; }

		[ProtoMember(8)]
		[Key(7)]
		public IReadOnlyDictionary<string, WidgetDto>? WidgetMap { get; set; }

		[ProtoMember(9)]
		[Key(8)]
		public HasWidgetDto? HasWidget { get; set; }

		[ProtoMember(10)]
		[Key(9)]
		public IReadOnlyList<double>? Point { get; set; }

		/// <summary>
		/// Determines if two DTOs are equivalent.
		/// </summary>
		public override bool IsEquivalentTo(RequiredRequestDto? other)
		{
			return other != null &&
				Query == other.Query &&
				Normal == other.Normal &&
				ServiceDataUtility.AreEquivalentDtos(Widget, other.Widget) &&
				ServiceDataUtility.AreEquivalentFieldValues(Widgets, other.Widgets) &&
				ServiceDataUtility.AreEquivalentFieldValues(WidgetMatrix, other.WidgetMatrix) &&
				ServiceDataUtility.AreEquivalentResults(WidgetResult, other.WidgetResult) &&
				ServiceDataUtility.AreEquivalentFieldValues(WidgetResults, other.WidgetResults) &&
				ServiceDataUtility.AreEquivalentFieldValues(WidgetMap, other.WidgetMap) &&
				ServiceDataUtility.AreEquivalentDtos(HasWidget, other.HasWidget) &&
				ServiceDataUtility.AreEquivalentFieldValues(Point, other.Point);
		}

		/// <summary>
		/// Validates the DTO.
		/// </summary>
		public override bool Validate(out string? errorMessage)
		{
			errorMessage = GetValidationErrorMessage();
			return errorMessage == null;
		}

		private string? GetValidationErrorMessage()
		{
			if (Query == null)
				return ServiceDataUtility.GetRequiredFieldErrorMessage("query");
			if (Normal == null)
				return ServiceDataUtility.GetRequiredFieldErrorMessage("normal");

			if (Point != null && Point.Count < 2)
				return ServiceDataUtility.GetInvalidFieldErrorMessage("point", "Count must be at least 2.");
			if (Point != null && Point.Count > 2)
				return ServiceDataUtility.GetInvalidFieldErrorMessage("point", "Count must be at most 2.");

			string? errorMessage;
			if (!ServiceDataUtility.ValidateFieldValue(Widget, "widget", out errorMessage))
				return errorMessage!;
			if (!ServiceDataUtility.ValidateFieldValue(Widgets, "widgets", out errorMessage))
				return errorMessage!;
			if (!ServiceDataUtility.ValidateFieldValue(WidgetMatrix, "widgetMatrix", out errorMessage))
				return errorMessage!;
			if (!ServiceDataUtility.ValidateFieldValue(WidgetResult, "widgetResult", out errorMessage))
				return errorMessage!;
			if (!ServiceDataUtility.ValidateFieldValue(WidgetResults, "widgetResults", out errorMessage))
				return errorMessage!;
			if (!ServiceDataUtility.ValidateFieldValue(WidgetMap, "widgetMap", out errorMessage))
				return errorMessage!;
			if (!ServiceDataUtility.ValidateFieldValue(HasWidget, "hasWidget", out errorMessage))
				return errorMessage!;

			return null;
		}

		static RequiredRequestDto()
		{
			ProtoBuf.Meta.RuntimeTypeModel.Default.Add<ServiceResult<WidgetDto>>(false).SetSurrogate(typeof(ServiceResultSurrogate<WidgetDto>));
		}
	}
}
