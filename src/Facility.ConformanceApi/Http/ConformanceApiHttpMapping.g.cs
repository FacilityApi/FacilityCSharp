// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using System.Net.Http;
using Facility.Core;
using Facility.Core.Http;
using Newtonsoft.Json.Linq;

#pragma warning disable 612, 618 // member is obsolete

namespace Facility.ConformanceApi.Http
{
	/// <summary>
	/// API for a Facility test server.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public static partial class ConformanceApiHttpMapping
	{
		/// <summary>
		/// Gets API information.
		/// </summary>
		public static readonly HttpMethodMapping<GetApiInfoRequestDto, GetApiInfoResponseDto> GetApiInfoMapping =
			new HttpMethodMapping<GetApiInfoRequestDto, GetApiInfoResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Get,
				Path = "/",
				ResponseMappings =
				{
					new HttpResponseMapping<GetApiInfoResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(GetApiInfoResponseDto),
					}.Build(),
				},
			}.Build();

		/// <summary>
		/// Gets widgets.
		/// </summary>
		public static readonly HttpMethodMapping<GetWidgetsRequestDto, GetWidgetsResponseDto> GetWidgetsMapping =
			new HttpMethodMapping<GetWidgetsRequestDto, GetWidgetsResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Get,
				Path = "/widgets",
				GetUriParameters = request =>
					new Dictionary<string, string?>
					{
						{ "q", request.Query },
					},
				SetUriParameters = (request, parameters) =>
				{
					parameters.TryGetValue("q", out var queryParameterQuery);
					request.Query = queryParameterQuery;
					return request;
				},
				ResponseMappings =
				{
					new HttpResponseMapping<GetWidgetsResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(GetWidgetsResponseDto),
					}.Build(),
				},
			}.Build();

		/// <summary>
		/// Creates a new widget.
		/// </summary>
		public static readonly HttpMethodMapping<CreateWidgetRequestDto, CreateWidgetResponseDto> CreateWidgetMapping =
			new HttpMethodMapping<CreateWidgetRequestDto, CreateWidgetResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/widgets",
				ValidateRequest = request =>
				{
					if (request.Widget == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("widget"));
					return ServiceResult.Success();
				},
				RequestBodyType = typeof(WidgetDto),
				GetRequestBody = request => request.Widget,
				CreateRequest = body => new CreateWidgetRequestDto { Widget = (WidgetDto?) body },
				ResponseMappings =
				{
					new HttpResponseMapping<CreateWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 201,
						ResponseBodyType = typeof(WidgetDto),
						MatchesResponse = response => response.Widget != null,
						GetResponseBody = response => response.Widget,
						CreateResponse = body => new CreateWidgetResponseDto { Widget = (WidgetDto?) body },
					}.Build(),
				},
				GetResponseHeaders = response =>
					new Dictionary<string, string?>
					{
						["Location"] = response.Url,
						["eTag"] = response.ETag,
					},
				SetResponseHeaders = (response, headers) =>
				{
					headers.TryGetValue("Location", out var headerUrl);
					response.Url = headerUrl;
					headers.TryGetValue("eTag", out var headerETag);
					response.ETag = headerETag;
					return response;
				},
			}.Build();

		/// <summary>
		/// Gets the specified widget.
		/// </summary>
		public static readonly HttpMethodMapping<GetWidgetRequestDto, GetWidgetResponseDto> GetWidgetMapping =
			new HttpMethodMapping<GetWidgetRequestDto, GetWidgetResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Get,
				Path = "/widgets/{id}",
				ValidateRequest = request =>
				{
					if (request.Id == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("id"));
					return ServiceResult.Success();
				},
				GetUriParameters = request =>
					new Dictionary<string, string?>
					{
						{ "id", request.Id == null ? null : request.Id.Value.ToString(CultureInfo.InvariantCulture) },
					},
				SetUriParameters = (request, parameters) =>
				{
					parameters.TryGetValue("id", out var queryParameterId);
					request.Id = ServiceDataUtility.TryParseInt32(queryParameterId);
					return request;
				},
				GetRequestHeaders = request =>
					new Dictionary<string, string?>
					{
						["If-None-Match"] = request.IfNotETag,
					},
				SetRequestHeaders = (request, headers) =>
				{
					headers.TryGetValue("If-None-Match", out var headerIfNotETag);
					request.IfNotETag = headerIfNotETag;
					return request;
				},
				ResponseMappings =
				{
					new HttpResponseMapping<GetWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(WidgetDto),
						MatchesResponse = response => response.Widget != null,
						GetResponseBody = response => response.Widget,
						CreateResponse = body => new GetWidgetResponseDto { Widget = (WidgetDto?) body },
					}.Build(),
					new HttpResponseMapping<GetWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 304,
						MatchesResponse = response => response.NotModified.GetValueOrDefault(),
						CreateResponse = body => new GetWidgetResponseDto { NotModified = true },
					}.Build(),
				},
				GetResponseHeaders = response =>
					new Dictionary<string, string?>
					{
						["eTag"] = response.ETag,
					},
				SetResponseHeaders = (response, headers) =>
				{
					headers.TryGetValue("eTag", out var headerETag);
					response.ETag = headerETag;
					return response;
				},
			}.Build();

		/// <summary>
		/// Deletes the specified widget.
		/// </summary>
		public static readonly HttpMethodMapping<DeleteWidgetRequestDto, DeleteWidgetResponseDto> DeleteWidgetMapping =
			new HttpMethodMapping<DeleteWidgetRequestDto, DeleteWidgetResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Delete,
				Path = "/widgets/{id}",
				ValidateRequest = request =>
				{
					if (request.Id == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("id"));
					return ServiceResult.Success();
				},
				GetUriParameters = request =>
					new Dictionary<string, string?>
					{
						{ "id", request.Id == null ? null : request.Id.Value.ToString(CultureInfo.InvariantCulture) },
					},
				SetUriParameters = (request, parameters) =>
				{
					parameters.TryGetValue("id", out var queryParameterId);
					request.Id = ServiceDataUtility.TryParseInt32(queryParameterId);
					return request;
				},
				GetRequestHeaders = request =>
					new Dictionary<string, string?>
					{
						["If-Match"] = request.IfETag,
					},
				SetRequestHeaders = (request, headers) =>
				{
					headers.TryGetValue("If-Match", out var headerIfETag);
					request.IfETag = headerIfETag;
					return request;
				},
				ResponseMappings =
				{
					new HttpResponseMapping<DeleteWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 204,
					}.Build(),
					new HttpResponseMapping<DeleteWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 404,
						MatchesResponse = response => response.NotFound.GetValueOrDefault(),
						CreateResponse = body => new DeleteWidgetResponseDto { NotFound = true },
					}.Build(),
					new HttpResponseMapping<DeleteWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 409,
						MatchesResponse = response => response.Conflict.GetValueOrDefault(),
						CreateResponse = body => new DeleteWidgetResponseDto { Conflict = true },
					}.Build(),
				},
			}.Build();

		/// <summary>
		/// Gets the specified widgets.
		/// </summary>
		public static readonly HttpMethodMapping<GetWidgetBatchRequestDto, GetWidgetBatchResponseDto> GetWidgetBatchMapping =
			new HttpMethodMapping<GetWidgetBatchRequestDto, GetWidgetBatchResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/widgets/get",
				ValidateRequest = request =>
				{
					if (request.Ids == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("ids"));
					return ServiceResult.Success();
				},
				RequestBodyType = typeof(IReadOnlyList<int>),
				GetRequestBody = request => request.Ids,
				CreateRequest = body => new GetWidgetBatchRequestDto { Ids = (IReadOnlyList<int>?) body },
				ResponseMappings =
				{
					new HttpResponseMapping<GetWidgetBatchResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(IReadOnlyList<ServiceResult<WidgetDto>>),
						MatchesResponse = response => response.Results != null,
						GetResponseBody = response => response.Results,
						CreateResponse = body => new GetWidgetBatchResponseDto { Results = (IReadOnlyList<ServiceResult<WidgetDto>>?) body },
					}.Build(),
				},
			}.Build();

		public static readonly HttpMethodMapping<MirrorFieldsRequestDto, MirrorFieldsResponseDto> MirrorFieldsMapping =
			new HttpMethodMapping<MirrorFieldsRequestDto, MirrorFieldsResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/mirrorFields",
				RequestBodyType = typeof(MirrorFieldsRequestDto),
				ResponseMappings =
				{
					new HttpResponseMapping<MirrorFieldsResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(MirrorFieldsResponseDto),
					}.Build(),
				},
			}.Build();

		public static readonly HttpMethodMapping<CheckQueryRequestDto, CheckQueryResponseDto> CheckQueryMapping =
			new HttpMethodMapping<CheckQueryRequestDto, CheckQueryResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Get,
				Path = "/checkQuery",
				GetUriParameters = request =>
					new Dictionary<string, string?>
					{
						{ "string", request.String },
						{ "boolean", request.Boolean == null ? null : request.Boolean.Value.ToString() },
						{ "double", request.Double == null ? null : request.Double.Value.ToString(CultureInfo.InvariantCulture) },
						{ "int32", request.Int32 == null ? null : request.Int32.Value.ToString(CultureInfo.InvariantCulture) },
						{ "int64", request.Int64 == null ? null : request.Int64.Value.ToString(CultureInfo.InvariantCulture) },
						{ "decimal", request.Decimal == null ? null : request.Decimal.Value.ToString(CultureInfo.InvariantCulture) },
						{ "enum", request.Enum == null ? null : request.Enum.Value.ToString() },
					},
				SetUriParameters = (request, parameters) =>
				{
					parameters.TryGetValue("string", out var queryParameterString);
					request.String = queryParameterString;
					parameters.TryGetValue("boolean", out var queryParameterBoolean);
					request.Boolean = ServiceDataUtility.TryParseBoolean(queryParameterBoolean);
					parameters.TryGetValue("double", out var queryParameterDouble);
					request.Double = ServiceDataUtility.TryParseDouble(queryParameterDouble);
					parameters.TryGetValue("int32", out var queryParameterInt32);
					request.Int32 = ServiceDataUtility.TryParseInt32(queryParameterInt32);
					parameters.TryGetValue("int64", out var queryParameterInt64);
					request.Int64 = ServiceDataUtility.TryParseInt64(queryParameterInt64);
					parameters.TryGetValue("decimal", out var queryParameterDecimal);
					request.Decimal = ServiceDataUtility.TryParseDecimal(queryParameterDecimal);
					parameters.TryGetValue("enum", out var queryParameterEnum);
					request.Enum = queryParameterEnum == null ? default(Answer?) : new Answer(queryParameterEnum);
					return request;
				},
				ResponseMappings =
				{
					new HttpResponseMapping<CheckQueryResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
					}.Build(),
				},
			}.Build();

		public static readonly HttpMethodMapping<CheckPathRequestDto, CheckPathResponseDto> CheckPathMapping =
			new HttpMethodMapping<CheckPathRequestDto, CheckPathResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Get,
				Path = "/checkPath/{string}/{boolean}/{double}/{int32}/{int64}/{decimal}/{enum}",
				ValidateRequest = request =>
				{
					if (string.IsNullOrEmpty(request.String))
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("string"));
					if (request.Boolean == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("boolean"));
					if (request.Double == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("double"));
					if (request.Int32 == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("int32"));
					if (request.Int64 == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("int64"));
					if (request.Decimal == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("decimal"));
					if (request.Enum == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("enum"));
					return ServiceResult.Success();
				},
				GetUriParameters = request =>
					new Dictionary<string, string?>
					{
						{ "string", request.String },
						{ "boolean", request.Boolean == null ? null : request.Boolean.Value.ToString() },
						{ "double", request.Double == null ? null : request.Double.Value.ToString(CultureInfo.InvariantCulture) },
						{ "int32", request.Int32 == null ? null : request.Int32.Value.ToString(CultureInfo.InvariantCulture) },
						{ "int64", request.Int64 == null ? null : request.Int64.Value.ToString(CultureInfo.InvariantCulture) },
						{ "decimal", request.Decimal == null ? null : request.Decimal.Value.ToString(CultureInfo.InvariantCulture) },
						{ "enum", request.Enum == null ? null : request.Enum.Value.ToString() },
					},
				SetUriParameters = (request, parameters) =>
				{
					parameters.TryGetValue("string", out var queryParameterString);
					request.String = queryParameterString;
					parameters.TryGetValue("boolean", out var queryParameterBoolean);
					request.Boolean = ServiceDataUtility.TryParseBoolean(queryParameterBoolean);
					parameters.TryGetValue("double", out var queryParameterDouble);
					request.Double = ServiceDataUtility.TryParseDouble(queryParameterDouble);
					parameters.TryGetValue("int32", out var queryParameterInt32);
					request.Int32 = ServiceDataUtility.TryParseInt32(queryParameterInt32);
					parameters.TryGetValue("int64", out var queryParameterInt64);
					request.Int64 = ServiceDataUtility.TryParseInt64(queryParameterInt64);
					parameters.TryGetValue("decimal", out var queryParameterDecimal);
					request.Decimal = ServiceDataUtility.TryParseDecimal(queryParameterDecimal);
					parameters.TryGetValue("enum", out var queryParameterEnum);
					request.Enum = queryParameterEnum == null ? default(Answer?) : new Answer(queryParameterEnum);
					return request;
				},
				ResponseMappings =
				{
					new HttpResponseMapping<CheckPathResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
					}.Build(),
				},
			}.Build();

		public static readonly HttpMethodMapping<MirrorHeadersRequestDto, MirrorHeadersResponseDto> MirrorHeadersMapping =
			new HttpMethodMapping<MirrorHeadersRequestDto, MirrorHeadersResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Get,
				Path = "/mirrorHeaders",
				GetRequestHeaders = request =>
					new Dictionary<string, string?>
					{
						["string"] = request.String,
						["boolean"] = request.Boolean == null ? null : request.Boolean.Value.ToString(),
						["double"] = request.Double == null ? null : request.Double.Value.ToString(CultureInfo.InvariantCulture),
						["int32"] = request.Int32 == null ? null : request.Int32.Value.ToString(CultureInfo.InvariantCulture),
						["int64"] = request.Int64 == null ? null : request.Int64.Value.ToString(CultureInfo.InvariantCulture),
						["decimal"] = request.Decimal == null ? null : request.Decimal.Value.ToString(CultureInfo.InvariantCulture),
						["enum"] = request.Enum == null ? null : request.Enum.Value.ToString(),
					},
				SetRequestHeaders = (request, headers) =>
				{
					headers.TryGetValue("string", out var headerString);
					request.String = headerString;
					headers.TryGetValue("boolean", out var headerBoolean);
					request.Boolean = ServiceDataUtility.TryParseBoolean(headerBoolean);
					headers.TryGetValue("double", out var headerDouble);
					request.Double = ServiceDataUtility.TryParseDouble(headerDouble);
					headers.TryGetValue("int32", out var headerInt32);
					request.Int32 = ServiceDataUtility.TryParseInt32(headerInt32);
					headers.TryGetValue("int64", out var headerInt64);
					request.Int64 = ServiceDataUtility.TryParseInt64(headerInt64);
					headers.TryGetValue("decimal", out var headerDecimal);
					request.Decimal = ServiceDataUtility.TryParseDecimal(headerDecimal);
					headers.TryGetValue("enum", out var headerEnum);
					request.Enum = headerEnum == null ? default(Answer?) : new Answer(headerEnum);
					return request;
				},
				ResponseMappings =
				{
					new HttpResponseMapping<MirrorHeadersResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
					}.Build(),
				},
				GetResponseHeaders = response =>
					new Dictionary<string, string?>
					{
						["string"] = response.String,
						["boolean"] = response.Boolean == null ? null : response.Boolean.Value.ToString(),
						["double"] = response.Double == null ? null : response.Double.Value.ToString(CultureInfo.InvariantCulture),
						["int32"] = response.Int32 == null ? null : response.Int32.Value.ToString(CultureInfo.InvariantCulture),
						["int64"] = response.Int64 == null ? null : response.Int64.Value.ToString(CultureInfo.InvariantCulture),
						["decimal"] = response.Decimal == null ? null : response.Decimal.Value.ToString(CultureInfo.InvariantCulture),
						["enum"] = response.Enum == null ? null : response.Enum.Value.ToString(),
					},
				SetResponseHeaders = (response, headers) =>
				{
					headers.TryGetValue("string", out var headerString);
					response.String = headerString;
					headers.TryGetValue("boolean", out var headerBoolean);
					response.Boolean = ServiceDataUtility.TryParseBoolean(headerBoolean);
					headers.TryGetValue("double", out var headerDouble);
					response.Double = ServiceDataUtility.TryParseDouble(headerDouble);
					headers.TryGetValue("int32", out var headerInt32);
					response.Int32 = ServiceDataUtility.TryParseInt32(headerInt32);
					headers.TryGetValue("int64", out var headerInt64);
					response.Int64 = ServiceDataUtility.TryParseInt64(headerInt64);
					headers.TryGetValue("decimal", out var headerDecimal);
					response.Decimal = ServiceDataUtility.TryParseDecimal(headerDecimal);
					headers.TryGetValue("enum", out var headerEnum);
					response.Enum = headerEnum == null ? default(Answer?) : new Answer(headerEnum);
					return response;
				},
			}.Build();

		public static readonly HttpMethodMapping<MixedRequestDto, MixedResponseDto> MixedMapping =
			new HttpMethodMapping<MixedRequestDto, MixedResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/mixed/{path}",
				ValidateRequest = request =>
				{
					if (string.IsNullOrEmpty(request.Path))
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("path"));
					return ServiceResult.Success();
				},
				GetUriParameters = request =>
					new Dictionary<string, string?>
					{
						{ "path", request.Path },
						{ "query", request.Query },
					},
				SetUriParameters = (request, parameters) =>
				{
					parameters.TryGetValue("query", out var queryParameterQuery);
					request.Query = queryParameterQuery;
					parameters.TryGetValue("path", out var queryParameterPath);
					request.Path = queryParameterPath;
					return request;
				},
				GetRequestHeaders = request =>
					new Dictionary<string, string?>
					{
						["header"] = request.Header,
					},
				SetRequestHeaders = (request, headers) =>
				{
					headers.TryGetValue("header", out var headerHeader);
					request.Header = headerHeader;
					return request;
				},
				RequestBodyType = typeof(MixedRequestDto),
				GetRequestBody = request =>
					new MixedRequestDto
					{
						Normal = request.Normal,
					},
				CreateRequest = body =>
					new MixedRequestDto
					{
						Normal = ((MixedRequestDto) body!).Normal,
					},
				ResponseMappings =
				{
					new HttpResponseMapping<MixedResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(MixedResponseDto),
						GetResponseBody = response =>
							new MixedResponseDto
							{
								Normal = response.Normal,
							},
						CreateResponse = body =>
							new MixedResponseDto
							{
								Normal = ((MixedResponseDto) body!).Normal,
							},
					}.Build(),
					new HttpResponseMapping<MixedResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 202,
						ResponseBodyType = typeof(JObject),
						MatchesResponse = response => response.Body != null,
						GetResponseBody = response => response.Body,
						CreateResponse = body => new MixedResponseDto { Body = (JObject?) body },
					}.Build(),
					new HttpResponseMapping<MixedResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 204,
						MatchesResponse = response => response.Empty.GetValueOrDefault(),
						CreateResponse = body => new MixedResponseDto { Empty = true },
					}.Build(),
				},
				GetResponseHeaders = response =>
					new Dictionary<string, string?>
					{
						["header"] = response.Header,
					},
				SetResponseHeaders = (response, headers) =>
				{
					headers.TryGetValue("header", out var headerHeader);
					response.Header = headerHeader;
					return response;
				},
			}.Build();

		public static readonly HttpMethodMapping<RequiredRequestDto, RequiredResponseDto> RequiredMapping =
			new HttpMethodMapping<RequiredRequestDto, RequiredResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/required",
				GetUriParameters = request =>
					new Dictionary<string, string?>
					{
						{ "query", request.Query },
					},
				SetUriParameters = (request, parameters) =>
				{
					parameters.TryGetValue("query", out var queryParameterQuery);
					request.Query = queryParameterQuery;
					return request;
				},
				RequestBodyType = typeof(RequiredRequestDto),
				GetRequestBody = request =>
					new RequiredRequestDto
					{
						Normal = request.Normal,
						FiveWidgets = request.FiveWidgets,
						Widget = request.Widget,
						WidgetMatrix = request.WidgetMatrix,
						WidgetResult = request.WidgetResult,
						WidgetResults = request.WidgetResults,
						WidgetMap = request.WidgetMap,
						HasWidget = request.HasWidget,
					},
				CreateRequest = body =>
					new RequiredRequestDto
					{
						Normal = ((RequiredRequestDto) body!).Normal,
						FiveWidgets = ((RequiredRequestDto) body!).FiveWidgets,
						Widget = ((RequiredRequestDto) body!).Widget,
						WidgetMatrix = ((RequiredRequestDto) body!).WidgetMatrix,
						WidgetResult = ((RequiredRequestDto) body!).WidgetResult,
						WidgetResults = ((RequiredRequestDto) body!).WidgetResults,
						WidgetMap = ((RequiredRequestDto) body!).WidgetMap,
						HasWidget = ((RequiredRequestDto) body!).HasWidget,
					},
				ResponseMappings =
				{
					new HttpResponseMapping<RequiredResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(RequiredResponseDto),
					}.Build(),
				},
			}.Build();

		public static readonly HttpMethodMapping<MirrorBytesRequestDto, MirrorBytesResponseDto> MirrorBytesMapping =
			new HttpMethodMapping<MirrorBytesRequestDto, MirrorBytesResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/mirrorBytes",
				ValidateRequest = request =>
				{
					if (request.Content == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("content"));
					return ServiceResult.Success();
				},
				GetRequestHeaders = request =>
					new Dictionary<string, string?>
					{
						["Content-Type"] = request.Type,
					},
				SetRequestHeaders = (request, headers) =>
				{
					headers.TryGetValue("Content-Type", out var headerType);
					request.Type = headerType;
					return request;
				},
				RequestBodyType = typeof(byte[]),
				GetRequestBody = request => request.Content,
				CreateRequest = body => new MirrorBytesRequestDto { Content = (byte[]?) body },
				ResponseMappings =
				{
					new HttpResponseMapping<MirrorBytesResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(byte[]),
						MatchesResponse = response => response.Content != null,
						GetResponseBody = response => response.Content,
						CreateResponse = body => new MirrorBytesResponseDto { Content = (byte[]?) body },
					}.Build(),
				},
				GetResponseHeaders = response =>
					new Dictionary<string, string?>
					{
						["Content-Type"] = response.Type,
					},
				SetResponseHeaders = (response, headers) =>
				{
					headers.TryGetValue("Content-Type", out var headerType);
					response.Type = headerType;
					return response;
				},
			}.Build();

		public static readonly HttpMethodMapping<MirrorTextRequestDto, MirrorTextResponseDto> MirrorTextMapping =
			new HttpMethodMapping<MirrorTextRequestDto, MirrorTextResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/mirrorText",
				ValidateRequest = request =>
				{
					if (request.Content == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("content"));
					return ServiceResult.Success();
				},
				GetRequestHeaders = request =>
					new Dictionary<string, string?>
					{
						["Content-Type"] = request.Type,
					},
				SetRequestHeaders = (request, headers) =>
				{
					headers.TryGetValue("Content-Type", out var headerType);
					request.Type = headerType;
					return request;
				},
				RequestBodyType = typeof(string),
				GetRequestBody = request => request.Content,
				CreateRequest = body => new MirrorTextRequestDto { Content = (string?) body },
				ResponseMappings =
				{
					new HttpResponseMapping<MirrorTextResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(string),
						MatchesResponse = response => response.Content != null,
						GetResponseBody = response => response.Content,
						CreateResponse = body => new MirrorTextResponseDto { Content = (string?) body },
					}.Build(),
				},
				GetResponseHeaders = response =>
					new Dictionary<string, string?>
					{
						["Content-Type"] = response.Type,
					},
				SetResponseHeaders = (response, headers) =>
				{
					headers.TryGetValue("Content-Type", out var headerType);
					response.Type = headerType;
					return response;
				},
			}.Build();

		public static readonly HttpMethodMapping<BodyTypesRequestDto, BodyTypesResponseDto> BodyTypesMapping =
			new HttpMethodMapping<BodyTypesRequestDto, BodyTypesResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/bodyTypes",
				ValidateRequest = request =>
				{
					if (request.Content == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("content"));
					return ServiceResult.Success();
				},
				RequestBodyType = typeof(string),
				RequestBodyContentType = "text/x-input",
				GetRequestBody = request => request.Content,
				CreateRequest = body => new BodyTypesRequestDto { Content = (string?) body },
				ResponseMappings =
				{
					new HttpResponseMapping<BodyTypesResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(byte[]),
						ResponseBodyContentType = "application/x-output",
						MatchesResponse = response => response.Content != null,
						GetResponseBody = response => response.Content,
						CreateResponse = body => new BodyTypesResponseDto { Content = (byte[]?) body },
					}.Build(),
				},
			}.Build();
	}
}
