// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core;
using Facility.Core.Http;

namespace Facility.ConformanceApi.Http
{
	/// <summary>
	/// API for a Facility test server.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public sealed partial class HttpClientConformanceApi : HttpClientService, IConformanceApi
	{
		/// <summary>
		/// Creates the service.
		/// </summary>
		public HttpClientConformanceApi(HttpClientServiceSettings? settings = null)
			: base(settings, s_defaults)
		{
		}

		/// <summary>
		/// Gets API information.
		/// </summary>
		public Task<ServiceResult<GetApiInfoResponseDto>> GetApiInfoAsync(GetApiInfoRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.GetApiInfoMapping, request, cancellationToken);

		/// <summary>
		/// Gets widgets.
		/// </summary>
		public Task<ServiceResult<GetWidgetsResponseDto>> GetWidgetsAsync(GetWidgetsRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.GetWidgetsMapping, request, cancellationToken);

		/// <summary>
		/// Creates a new widget.
		/// </summary>
		public Task<ServiceResult<CreateWidgetResponseDto>> CreateWidgetAsync(CreateWidgetRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.CreateWidgetMapping, request, cancellationToken);

		/// <summary>
		/// Gets the specified widget.
		/// </summary>
		public Task<ServiceResult<GetWidgetResponseDto>> GetWidgetAsync(GetWidgetRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.GetWidgetMapping, request, cancellationToken);

		/// <summary>
		/// Deletes the specified widget.
		/// </summary>
		public Task<ServiceResult<DeleteWidgetResponseDto>> DeleteWidgetAsync(DeleteWidgetRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.DeleteWidgetMapping, request, cancellationToken);

		/// <summary>
		/// Gets the specified widgets.
		/// </summary>
		public Task<ServiceResult<GetWidgetBatchResponseDto>> GetWidgetBatchAsync(GetWidgetBatchRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.GetWidgetBatchMapping, request, cancellationToken);

		public Task<ServiceResult<MirrorFieldsResponseDto>> MirrorFieldsAsync(MirrorFieldsRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.MirrorFieldsMapping, request, cancellationToken);

		public Task<ServiceResult<CheckQueryResponseDto>> CheckQueryAsync(CheckQueryRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.CheckQueryMapping, request, cancellationToken);

		public Task<ServiceResult<CheckPathResponseDto>> CheckPathAsync(CheckPathRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.CheckPathMapping, request, cancellationToken);

		public Task<ServiceResult<MirrorHeadersResponseDto>> MirrorHeadersAsync(MirrorHeadersRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.MirrorHeadersMapping, request, cancellationToken);

		public Task<ServiceResult<MixedResponseDto>> MixedAsync(MixedRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.MixedMapping, request, cancellationToken);

		public Task<ServiceResult<RequiredResponseDto>> RequiredAsync(RequiredRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.RequiredMapping, request, cancellationToken);

		public Task<ServiceResult<MirrorBytesResponseDto>> MirrorBytesAsync(MirrorBytesRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.MirrorBytesMapping, request, cancellationToken);

		public Task<ServiceResult<MirrorTextResponseDto>> MirrorTextAsync(MirrorTextRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.MirrorTextMapping, request, cancellationToken);

		public Task<ServiceResult<BodyTypesResponseDto>> BodyTypesAsync(BodyTypesRequestDto request, CancellationToken cancellationToken = default) =>
			TrySendRequestAsync(ConformanceApiHttpMapping.BodyTypesMapping, request, cancellationToken);

		private static readonly HttpClientServiceDefaults s_defaults = new HttpClientServiceDefaults
		{
			ServiceSerializer = SystemTextJsonServiceSerializer.Instance,
		};
	}
}
