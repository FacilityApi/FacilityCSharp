// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Facility.Core;
using Facility.Core.MessagePack;

namespace Facility.ConformanceApi
{
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	[MessagePack.MessagePackObject]
	public sealed partial class AnyResultDto : ServiceDto<AnyResultDto>
	{
		/// <summary>
		/// Creates an instance.
		/// </summary>
		public AnyResultDto()
		{
		}

		[MessagePack.Key("string")]
		public ServiceResult<string>? String { get; set; }

		[MessagePack.Key("boolean")]
		public ServiceResult<bool>? Boolean { get; set; }

		[MessagePack.Key("double")]
		public ServiceResult<double>? Double { get; set; }

		[MessagePack.Key("int32")]
		public ServiceResult<int>? Int32 { get; set; }

		[MessagePack.Key("int64")]
		public ServiceResult<long>? Int64 { get; set; }

		[MessagePack.Key("decimal")]
		public ServiceResult<decimal>? Decimal { get; set; }

		[MessagePack.Key("bytes")]
		public ServiceResult<byte[]>? Bytes { get; set; }

		[MessagePack.Key("object")]
		public ServiceResult<ServiceObject>? Object { get; set; }

		[MessagePack.Key("error")]
		public ServiceResult<ServiceErrorDto>? Error { get; set; }

		[MessagePack.Key("data")]
		public ServiceResult<AnyDto>? Data { get; set; }

		[MessagePack.Key("enum")]
		public ServiceResult<Answer>? Enum { get; set; }

		[MessagePack.Key("array")]
		public ServiceResult<IReadOnlyList<int>>? Array { get; set; }

		[MessagePack.Key("map")]
		public ServiceResult<IReadOnlyDictionary<string, int>>? Map { get; set; }

		[MessagePack.Key("result")]
		public ServiceResult<ServiceResult<int>>? Result { get; set; }

		[MessagePack.Key("nullable")]
		public ServiceResult<int?>? Nullable { get; set; }

		/// <summary>
		/// Returns the DTO as JSON.
		/// </summary>
		public override string ToString() => SystemTextJsonServiceSerializer.Instance.ToJson(this);

		/// <summary>
		/// Determines if two DTOs are equivalent.
		/// </summary>
		public override bool IsEquivalentTo(AnyResultDto? other)
		{
			return other != null &&
				ServiceDataUtility.AreEquivalentResults(String, other.String) &&
				ServiceDataUtility.AreEquivalentResults(Boolean, other.Boolean) &&
				ServiceDataUtility.AreEquivalentResults(Double, other.Double) &&
				ServiceDataUtility.AreEquivalentResults(Int32, other.Int32) &&
				ServiceDataUtility.AreEquivalentResults(Int64, other.Int64) &&
				ServiceDataUtility.AreEquivalentResults(Decimal, other.Decimal) &&
				ServiceDataUtility.AreEquivalentResults(Bytes, other.Bytes) &&
				ServiceDataUtility.AreEquivalentResults(Object, other.Object) &&
				ServiceDataUtility.AreEquivalentResults(Error, other.Error) &&
				ServiceDataUtility.AreEquivalentResults(Data, other.Data) &&
				ServiceDataUtility.AreEquivalentResults(Enum, other.Enum) &&
				ServiceDataUtility.AreEquivalentResults(Array, other.Array) &&
				ServiceDataUtility.AreEquivalentResults(Map, other.Map) &&
				ServiceDataUtility.AreEquivalentResults(Result, other.Result) &&
				ServiceDataUtility.AreEquivalentResults(Nullable, other.Nullable);
		}
	}
}
