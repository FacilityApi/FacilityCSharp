// DO NOT EDIT: generated by fsdgencsharp
using System;
using System.Collections.Generic;
using Facility.Core;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Facility.ExampleApi
{
	/// <summary>
	/// A preference.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public sealed partial class PreferenceDto : ServiceDto<PreferenceDto>
	{
		/// <summary>
		/// Creates an instance.
		/// </summary>
		public PreferenceDto()
		{
		}

		[JsonProperty("boolean")]
		public bool? IsBoolean { get; set; }

		public IReadOnlyList<bool> Booleans { get; set; }

		public double? Double { get; set; }

		public IReadOnlyList<double> Doubles { get; set; }

		public int? Integer { get; set; }

		public IReadOnlyList<int> Integers { get; set; }

		public string String { get; set; }

		public IReadOnlyList<string> Strings { get; set; }

		public byte[] Bytes { get; set; }

		public IReadOnlyList<byte[]> Byteses { get; set; }

		public WidgetField? WidgetField { get; set; }

		public IReadOnlyList<WidgetField> WidgetFields { get; set; }

		public WidgetDto Widget { get; set; }

		public IReadOnlyList<WidgetDto> Widgets { get; set; }

		public ServiceResult<WidgetDto> Result { get; set; }

		public IReadOnlyList<ServiceResult<WidgetDto>> Results { get; set; }

		public long? BigInteger { get; set; }

		public IReadOnlyList<long> BigIntegers { get; set; }

		public ServiceErrorDto Error { get; set; }

		public IReadOnlyList<ServiceErrorDto> Errors { get; set; }

		public JObject Object { get; set; }

		public IReadOnlyList<JObject> Objects { get; set; }

		public IReadOnlyDictionary<string, string> NamedStrings { get; set; }

		public IReadOnlyDictionary<string, WidgetDto> NamedWidgets { get; set; }

		/// <summary>
		/// Determines if two DTOs are equivalent.
		/// </summary>
		public override bool IsEquivalentTo(PreferenceDto other)
		{
			return other != null &&
				IsBoolean == other.IsBoolean &&
				ServiceDataUtility.AreEquivalentFieldValues(Booleans, other.Booleans) &&
				Double == other.Double &&
				ServiceDataUtility.AreEquivalentFieldValues(Doubles, other.Doubles) &&
				Integer == other.Integer &&
				ServiceDataUtility.AreEquivalentFieldValues(Integers, other.Integers) &&
				String == other.String &&
				ServiceDataUtility.AreEquivalentFieldValues(Strings, other.Strings) &&
				ServiceDataUtility.AreEquivalentBytes(Bytes, other.Bytes) &&
				ServiceDataUtility.AreEquivalentFieldValues(Byteses, other.Byteses) &&
				WidgetField == other.WidgetField &&
				ServiceDataUtility.AreEquivalentFieldValues(WidgetFields, other.WidgetFields) &&
				ServiceDataUtility.AreEquivalentDtos(Widget, other.Widget) &&
				ServiceDataUtility.AreEquivalentFieldValues(Widgets, other.Widgets) &&
				ServiceDataUtility.AreEquivalentResults(Result, other.Result) &&
				ServiceDataUtility.AreEquivalentFieldValues(Results, other.Results) &&
				BigInteger == other.BigInteger &&
				ServiceDataUtility.AreEquivalentFieldValues(BigIntegers, other.BigIntegers) &&
				ServiceDataUtility.AreEquivalentDtos(Error, other.Error) &&
				ServiceDataUtility.AreEquivalentFieldValues(Errors, other.Errors) &&
				ServiceDataUtility.AreEquivalentObjects(Object, other.Object) &&
				ServiceDataUtility.AreEquivalentFieldValues(Objects, other.Objects) &&
				ServiceDataUtility.AreEquivalentFieldValues(NamedStrings, other.NamedStrings) &&
				ServiceDataUtility.AreEquivalentFieldValues(NamedWidgets, other.NamedWidgets);
		}
	}
}
