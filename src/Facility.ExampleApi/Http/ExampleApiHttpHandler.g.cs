// DO NOT EDIT: generated by fsdgencsharp
using System;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core.Http;

#pragma warning disable 612, 618 // member is obsolete

namespace Facility.ExampleApi.Http
{
	/// <summary>
	/// Example service for widgets.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public sealed partial class ExampleApiHttpHandler : ServiceHttpHandler
	{
		/// <summary>
		/// Creates the handler.
		/// </summary>
		public ExampleApiHttpHandler(IExampleApi service, ServiceHttpHandlerSettings settings)
			: base(settings)
		{
			if (service == null)
				throw new ArgumentNullException("service");

			m_service = service;
		}

		/// <summary>
		/// Attempts to handle the HTTP request.
		/// </summary>
		public override async Task<HttpResponseMessage> TryHandleHttpRequestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return await AdaptTask(TryHandleGetInfoAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleKitchenAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleNotRestfulAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleGetPreferenceAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleSetPreferenceAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleTransformAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleGetWidgetsAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleCreateWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleGetWidgetBatchAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleGetWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleDeleteWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleEditWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleGetWidgetWeightAsync(httpRequest, cancellationToken)).ConfigureAwait(true);
		}

		/// <summary>
		/// Gets widgets.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetWidgetsAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.GetWidgetsMapping, httpRequest, m_service.GetWidgetsAsync, cancellationToken);
		}

		/// <summary>
		/// Creates a new widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleCreateWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.CreateWidgetMapping, httpRequest, m_service.CreateWidgetAsync, cancellationToken);
		}

		/// <summary>
		/// Gets the specified widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.GetWidgetMapping, httpRequest, m_service.GetWidgetAsync, cancellationToken);
		}

		/// <summary>
		/// Deletes the specified widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleDeleteWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.DeleteWidgetMapping, httpRequest, m_service.DeleteWidgetAsync, cancellationToken);
		}

		/// <summary>
		/// Edits widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleEditWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.EditWidgetMapping, httpRequest, m_service.EditWidgetAsync, cancellationToken);
		}

		/// <summary>
		/// Gets the specified widgets.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetWidgetBatchAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.GetWidgetBatchMapping, httpRequest, m_service.GetWidgetBatchAsync, cancellationToken);
		}

		/// <summary>
		/// Gets the widget weight.
		/// </summary>
		[Obsolete]
		public Task<HttpResponseMessage> TryHandleGetWidgetWeightAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.GetWidgetWeightMapping, httpRequest, m_service.GetWidgetWeightAsync, cancellationToken);
		}

		/// <summary>
		/// Gets a widget preference.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetPreferenceAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.GetPreferenceMapping, httpRequest, m_service.GetPreferenceAsync, cancellationToken);
		}

		/// <summary>
		/// Sets a widget preference.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleSetPreferenceAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.SetPreferenceMapping, httpRequest, m_service.SetPreferenceAsync, cancellationToken);
		}

		/// <summary>
		/// Gets service info.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetInfoAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.GetInfoMapping, httpRequest, m_service.GetInfoAsync, cancellationToken);
		}

		/// <summary>
		/// Demonstrates the default HTTP behavior.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleNotRestfulAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.NotRestfulMapping, httpRequest, m_service.NotRestfulAsync, cancellationToken);
		}

		public Task<HttpResponseMessage> TryHandleKitchenAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.KitchenMapping, httpRequest, m_service.KitchenAsync, cancellationToken);
		}

		public Task<HttpResponseMessage> TryHandleTransformAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ExampleApiHttpMapping.TransformMapping, httpRequest, m_service.TransformAsync, cancellationToken);
		}

		/// <summary>
		/// Returns the HTTP status code for a custom error code.
		/// </summary>
		protected override HttpStatusCode? TryGetCustomHttpStatusCode(string errorCode)
		{
			return HttpExampleApiErrors.TryGetHttpStatusCode(errorCode);
		}

		readonly IExampleApi m_service;
	}
}
