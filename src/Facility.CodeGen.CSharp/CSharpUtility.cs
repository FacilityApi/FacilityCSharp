using System.Globalization;
using System.Text;
using Facility.Definition;
using Facility.Definition.CodeGen;

namespace Facility.CodeGen.CSharp
{
	internal static class CSharpUtility
	{
		public static void WriteFileHeader(CodeWriter code, string generatorName)
		{
			code.WriteLine("// <auto-generated>");
			code.WriteLine("// " + CodeGenUtility.GetCodeGenComment(generatorName));
			code.WriteLine("// </auto-generated>");
		}

		public static void WriteCodeGenAttribute(CodeWriter code, string generatorName) =>
			code.WriteLine($"[System.CodeDom.Compiler.GeneratedCode(\"{generatorName}\", \"\")]");

		public static void WriteObsoletePragma(CodeWriter code) =>
			code.WriteLine("#pragma warning disable 612, 618 // member is obsolete");

		public static void WriteObsoleteAttribute(CodeWriter code, ServiceElementWithAttributesInfo element)
		{
			if (element.IsObsolete)
			{
				var message = element.ObsoleteMessage;
				code.WriteLine(message != null ? $"[Obsolete({CreateString(message)})]" : "[Obsolete]");
			}
		}

		public static void WriteUsings(CodeWriter code, IEnumerable<string> namespaceNames, string namespaceName)
		{
			var sortedNamespaceNames = namespaceNames.Distinct().Where(x => namespaceName != x && !namespaceName.StartsWith(x + ".", StringComparison.Ordinal)).ToList();
			sortedNamespaceNames.Sort(CompareUsings);
			if (sortedNamespaceNames.Count != 0)
			{
				foreach (string namepaceName in sortedNamespaceNames)
					code.WriteLine("using " + namepaceName + ";");
				code.WriteLine();
			}
		}

		public static void WriteSummary(CodeWriter code, string summary)
		{
			if (!string.IsNullOrWhiteSpace(summary))
			{
				code.WriteLine("/// <summary>");
				code.WriteLine("/// " + summary);
				code.WriteLine("/// </summary>");
			}
		}

		public const string FileExtension = ".g.cs";

		public const string HttpDirectoryName = "Http";

		public static string GetInterfaceName(ServiceInfo serviceInfo) => $"I{CodeGenUtility.Capitalize(serviceInfo.Name)}";

		public static string GetMethodName(ServiceMethodInfo methodInfo) => CodeGenUtility.Capitalize(methodInfo.Name);

		public static string GetDtoName(ServiceDtoInfo dtoInfo) => CodeGenUtility.Capitalize(dtoInfo.Name) + "Dto";

		public static string GetRequestDtoName(ServiceMethodInfo methodInfo) => CodeGenUtility.Capitalize(methodInfo.Name) + "RequestDto";

		public static string GetResponseDtoName(ServiceMethodInfo methodInfo) => CodeGenUtility.Capitalize(methodInfo.Name) + "ResponseDto";

		public static string GetEnumName(ServiceEnumInfo enumInfo) => CodeGenUtility.Capitalize(enumInfo.Name);

		public static string GetEnumValueName(ServiceEnumValueInfo enumValue) => CodeGenUtility.Capitalize(enumValue.Name);

		public static string GetErrorSetName(ServiceErrorSetInfo errorSetInfo) => CodeGenUtility.Capitalize(errorSetInfo.Name);

		public static string GetErrorName(ServiceErrorInfo errorInfo) => CodeGenUtility.Capitalize(errorInfo.Name);

		public static string CreateString(string text)
		{
			var builder = new StringBuilder(text.Length + 2);
			builder.Append('\"');
			foreach (var ch in text)
			{
				switch (ch)
				{
					case '"':
						builder.Append("\\\"");
						break;
					case '\\':
						builder.Append("\\\\");
						break;
					case '\n':
						builder.Append("\\n");
						break;
					case '\r':
						builder.Append("\\r");
						break;
					case '\t':
						builder.Append("\\t");
						break;
					case '\0':
						builder.Append("\\0");
						break;
					case ' ':
						builder.Append(' ');
						break;
					default:
						if (ch < 0x20 || char.IsWhiteSpace(ch))
							builder.Append("\\u").Append(((int) ch).ToString("x4", CultureInfo.InvariantCulture));
						else
							builder.Append(ch);
						break;
				}
			}
			builder.Append('\"');
			return builder.ToString();
		}

		private static int CompareUsings(string left, string right)
		{
			var leftGroup = GetUsingGroup(left);
			var rightGroup = GetUsingGroup(right);
			var result = leftGroup.CompareTo(rightGroup);
			return result != 0 ? result : string.CompareOrdinal(left, right);
		}

		private static int GetUsingGroup(string namespaceName) =>
			namespaceName == "System" || namespaceName.StartsWith("System.", StringComparison.Ordinal) ? 1 : 2;
	}
}
