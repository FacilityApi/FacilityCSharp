// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core;
using Facility.Core.Http;

namespace Facility.Benchmarks.Http
{
	/// <summary>
	/// Common service elements.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public sealed partial class BenchmarkServiceHttpHandler : ServiceHttpHandler
	{
		/// <summary>
		/// Creates the handler.
		/// </summary>
		public BenchmarkServiceHttpHandler(IBenchmarkService service, ServiceHttpHandlerSettings? settings = null)
			: base(settings, s_defaults)
		{
			m_service = service ?? throw new ArgumentNullException(nameof(service));
		}

		/// <summary>
		/// Creates the handler.
		/// </summary>
		public BenchmarkServiceHttpHandler(Func<HttpRequestMessage, IBenchmarkService> getService, ServiceHttpHandlerSettings? settings = null)
			: base(settings, s_defaults)
		{
			m_getService = getService ?? throw new ArgumentNullException(nameof(getService));
		}

		/// <summary>
		/// Attempts to handle the HTTP request.
		/// </summary>
		public override async Task<HttpResponseMessage?> TryHandleHttpRequestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken = default)
		{
			return await AdaptTask(TryHandleGetUsersAsync(httpRequest, cancellationToken)).ConfigureAwait(true);
		}

		public Task<HttpResponseMessage?> TryHandleGetUsersAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken = default) =>
			TryHandleServiceMethodAsync(BenchmarkServiceHttpMapping.GetUsersMapping, httpRequest, GetService(httpRequest).GetUsersAsync, cancellationToken);

		private IBenchmarkService GetService(HttpRequestMessage httpRequest) => m_service ?? m_getService!(httpRequest);

		private static readonly ServiceHttpHandlerDefaults s_defaults = new ServiceHttpHandlerDefaults
		{
			ContentSerializer = HttpContentSerializer.Create(SystemTextJsonServiceSerializer.Instance),
		};

		private readonly IBenchmarkService? m_service;
		private readonly Func<HttpRequestMessage, IBenchmarkService>? m_getService;
	}
}
