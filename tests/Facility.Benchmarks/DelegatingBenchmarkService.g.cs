// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core;

namespace Facility.Benchmarks
{
	/// <summary>
	/// A delegating implementation of BenchmarkService.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public class DelegatingBenchmarkService : IBenchmarkService
	{
		/// <summary>
		/// Creates an instance with the specified delegator.
		/// </summary>
		public DelegatingBenchmarkService(ServiceDelegator delegator) =>
			m_delegator = delegator ?? throw new ArgumentNullException(nameof(delegator));

		public virtual async Task<ServiceResult<GetUsersResponseDto>> GetUsersAsync(GetUsersRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_delegator(BenchmarkServiceMethods.GetUsers, request, cancellationToken).ConfigureAwait(false)).Cast<GetUsersResponseDto>();

		private readonly ServiceDelegator m_delegator;
	}
}
