// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core;

namespace Facility.Benchmarks
{
	/// <summary>
	/// A delegating implementation of BenchmarkService.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public partial class DelegatingBenchmarkService : IBenchmarkService
	{
		/// <summary>
		/// Creates an instance with the specified service delegate.
		/// </summary>
		public DelegatingBenchmarkService(ServiceDelegate serviceDelegate) =>
			m_serviceDelegate = serviceDelegate ?? throw new ArgumentNullException(nameof(serviceDelegate));

		/// <summary>
		/// Creates an instance with the specified delegator.
		/// </summary>
		[Obsolete("Use the constructor that accepts a ServiceDelegate.")]
		public DelegatingBenchmarkService(ServiceDelegator delegator) =>
			m_serviceDelegate = ServiceDelegate.FromDelegator(delegator);

		public virtual async Task<ServiceResult<GetUsersResponseDto>> GetUsersAsync(GetUsersRequestDto request, CancellationToken cancellationToken = default) =>
			(await m_serviceDelegate.InvokeMethodAsync(BenchmarkServiceMethods.GetUsers, request, cancellationToken).ConfigureAwait(false)).Cast<GetUsersResponseDto>();

		private readonly ServiceDelegate m_serviceDelegate;
	}
}
