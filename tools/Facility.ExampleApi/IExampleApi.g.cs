// DO NOT EDIT: generated by fsdgencsharp
using System;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core;

namespace Facility.ExampleApi
{
	/// <summary>
	/// Example service for widgets.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public partial interface IExampleApi
	{
		/// <summary>
		/// Gets widgets.
		/// </summary>
		Task<ServiceResult<GetWidgetsResponseDto>> GetWidgetsAsync(GetWidgetsRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Creates a new widget.
		/// </summary>
		Task<ServiceResult<CreateWidgetResponseDto>> CreateWidgetAsync(CreateWidgetRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Gets the specified widget.
		/// </summary>
		Task<ServiceResult<GetWidgetResponseDto>> GetWidgetAsync(GetWidgetRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Deletes the specified widget.
		/// </summary>
		Task<ServiceResult<DeleteWidgetResponseDto>> DeleteWidgetAsync(DeleteWidgetRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Edits widget.
		/// </summary>
		Task<ServiceResult<EditWidgetResponseDto>> EditWidgetAsync(EditWidgetRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Gets the specified widgets.
		/// </summary>
		Task<ServiceResult<GetWidgetBatchResponseDto>> GetWidgetBatchAsync(GetWidgetBatchRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Gets the widget weight.
		/// </summary>
		[Obsolete]
		Task<ServiceResult<GetWidgetWeightResponseDto>> GetWidgetWeightAsync(GetWidgetWeightRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Gets a widget preference.
		/// </summary>
		Task<ServiceResult<GetPreferenceResponseDto>> GetPreferenceAsync(GetPreferenceRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Sets a widget preference.
		/// </summary>
		Task<ServiceResult<SetPreferenceResponseDto>> SetPreferenceAsync(SetPreferenceRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Gets service info.
		/// </summary>
		Task<ServiceResult<GetInfoResponseDto>> GetInfoAsync(GetInfoRequestDto request, CancellationToken cancellationToken);

		/// <summary>
		/// Demonstrates the default HTTP behavior.
		/// </summary>
		Task<ServiceResult<NotRestfulResponseDto>> NotRestfulAsync(NotRestfulRequestDto request, CancellationToken cancellationToken);

		Task<ServiceResult<KitchenResponseDto>> KitchenAsync(KitchenRequestDto request, CancellationToken cancellationToken);

		Task<ServiceResult<TransformResponseDto>> TransformAsync(TransformRequestDto request, CancellationToken cancellationToken);
	}
}
