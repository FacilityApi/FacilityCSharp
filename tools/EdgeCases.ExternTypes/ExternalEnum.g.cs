// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Facility.Core;
using Facility.Core.MessagePack;

namespace EdgeCases.ExternTypes
{
	/// <summary>
	/// An enumeration used by the EdgeCases FSD as an external enum type.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	[Newtonsoft.Json.JsonConverter(typeof(ExternalEnumJsonConverter))]
	[System.Text.Json.Serialization.JsonConverter(typeof(ExternalEnumSystemTextJsonConverter))]
	[MessagePack.MessagePackFormatter(typeof(ExternalEnumMessagePackFormatter))]
	public partial struct ExternalEnum : IEquatable<ExternalEnum>
	{
		public static readonly ExternalEnum A = new ExternalEnum(Strings.A);

		public static readonly ExternalEnum B = new ExternalEnum(Strings.B);

		public static readonly ExternalEnum C = new ExternalEnum(Strings.C);

		/// <summary>
		/// Creates an instance.
		/// </summary>
		public ExternalEnum(string value) => m_value = value;

		/// <summary>
		/// Converts the instance to a string.
		/// </summary>
		public override string ToString() => m_value != null && s_valueCache.TryGetValue(m_value, out var cachedValue) ? cachedValue : m_value ?? "";

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public bool Equals(ExternalEnum other) => StringComparer.OrdinalIgnoreCase.Equals(m_value ?? "", other.m_value ?? "");

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public override bool Equals(object? obj) => obj is ExternalEnum && Equals((ExternalEnum) obj);

		/// <summary>
		/// Gets the hash code.
		/// </summary>
		public override int GetHashCode() => StringComparer.OrdinalIgnoreCase.GetHashCode(m_value ?? "");

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public static bool operator ==(ExternalEnum left, ExternalEnum right) => left.Equals(right);

		/// <summary>
		/// Checks for inequality.
		/// </summary>
		public static bool operator !=(ExternalEnum left, ExternalEnum right) => !left.Equals(right);

		/// <summary>
		/// Returns true if the instance is equal to one of the defined values.
		/// </summary>
		public bool IsDefined() => m_value != null && s_valueCache.ContainsKey(m_value);

		/// <summary>
		/// Returns all of the defined values.
		/// </summary>
		public static IReadOnlyList<ExternalEnum> GetValues() => s_values;

		/// <summary>
		/// Provides string constants for defined values.
		/// </summary>
		public static class Strings
		{
			public const string A = "A";

			public const string B = "B";

			public const string C = "C";
		}

		/// <summary>
		/// Used for serialization.
		/// </summary>
		public sealed class ExternalEnumJsonConverter : ServiceEnumJsonConverter<ExternalEnum>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override ExternalEnum CreateCore(string value) => new ExternalEnum(value);
		}

		/// <summary>
		/// Used for serialization.
		/// </summary>
		public sealed class ExternalEnumSystemTextJsonConverter : ServiceEnumSystemTextJsonConverter<ExternalEnum>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override ExternalEnum CreateCore(string value) => new ExternalEnum(value);
		}

		/// <summary>
		/// Used for serialization.
		/// </summary>
		public sealed class ExternalEnumMessagePackFormatter : ServiceEnumMessagePackFormatter<ExternalEnum>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override ExternalEnum CreateCore(string value) => new ExternalEnum(value);
		}

		private static readonly ReadOnlyCollection<ExternalEnum> s_values = new ReadOnlyCollection<ExternalEnum>(
			new[]
			{
				A,
				B,
				C,
			});

		private static readonly IReadOnlyDictionary<string, string> s_valueCache = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
		{
			{ Strings.A, Strings.A },
			{ Strings.B, Strings.B },
			{ Strings.C, Strings.C },
		};

		private readonly string m_value;
	}
}
