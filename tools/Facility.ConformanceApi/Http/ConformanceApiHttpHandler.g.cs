// DO NOT EDIT: generated by fsdgencsharp
using System;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core.Http;

namespace Facility.ConformanceApi.Http
{
	/// <summary>
	/// API for a Facility test server.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public sealed partial class ConformanceApiHttpHandler : ServiceHttpHandler
	{
		/// <summary>
		/// Creates the handler.
		/// </summary>
		public ConformanceApiHttpHandler(IConformanceApi service, ServiceHttpHandlerSettings settings)
			: base(settings)
		{
			if (service == null)
				throw new ArgumentNullException("service");

			m_service = service;
		}

		/// <summary>
		/// Creates the handler.
		/// </summary>
		public ConformanceApiHttpHandler(Func<HttpRequestMessage, IConformanceApi> getService, ServiceHttpHandlerSettings settings)
			: base(settings)
		{
			if (getService == null)
				throw new ArgumentNullException("getService");

			m_getService = getService;
		}

		/// <summary>
		/// Attempts to handle the HTTP request.
		/// </summary>
		public override async Task<HttpResponseMessage> TryHandleHttpRequestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return await AdaptTask(TryHandleGetApiInfoAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleCheckQueryAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleCheckPathAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleMirrorFieldsAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleMirrorHeadersAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleCreateWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleGetWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleDeleteWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true);
		}

		/// <summary>
		/// Gets API information.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetApiInfoAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ConformanceApiHttpMapping.GetApiInfoMapping, httpRequest, GetService(httpRequest).GetApiInfoAsync, cancellationToken);
		}

		/// <summary>
		/// Creates a new widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleCreateWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ConformanceApiHttpMapping.CreateWidgetMapping, httpRequest, GetService(httpRequest).CreateWidgetAsync, cancellationToken);
		}

		/// <summary>
		/// Gets the specified widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ConformanceApiHttpMapping.GetWidgetMapping, httpRequest, GetService(httpRequest).GetWidgetAsync, cancellationToken);
		}

		/// <summary>
		/// Deletes the specified widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleDeleteWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ConformanceApiHttpMapping.DeleteWidgetMapping, httpRequest, GetService(httpRequest).DeleteWidgetAsync, cancellationToken);
		}

		public Task<HttpResponseMessage> TryHandleMirrorFieldsAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ConformanceApiHttpMapping.MirrorFieldsMapping, httpRequest, GetService(httpRequest).MirrorFieldsAsync, cancellationToken);
		}

		public Task<HttpResponseMessage> TryHandleCheckQueryAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ConformanceApiHttpMapping.CheckQueryMapping, httpRequest, GetService(httpRequest).CheckQueryAsync, cancellationToken);
		}

		public Task<HttpResponseMessage> TryHandleCheckPathAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ConformanceApiHttpMapping.CheckPathMapping, httpRequest, GetService(httpRequest).CheckPathAsync, cancellationToken);
		}

		public Task<HttpResponseMessage> TryHandleMirrorHeadersAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(ConformanceApiHttpMapping.MirrorHeadersMapping, httpRequest, GetService(httpRequest).MirrorHeadersAsync, cancellationToken);
		}

		private IConformanceApi GetService(HttpRequestMessage httpRequest)
		{
			return m_service ?? m_getService(httpRequest);
		}

		readonly IConformanceApi m_service;
		readonly Func<HttpRequestMessage, IConformanceApi> m_getService;
	}
}
