service EdgeCases
{
	/// A DTO.
	data Data
	{
		[csharp(name: Field)]
		f: nullable<string>;
	}

	/// An old method.
	[obsolete, http(method: PATCH)]
	method oldMethod
	{
	}:
	{
	}

	/// Custom HTTP method.
	method customHttp
	{
		value: string;

		[http(from: "custom")]
		extras: map<string>;
	}:
	{
		value: string;

		[http(from: "custom")]
		extras: map<string>;
	}

	/// An old DTO.
	[obsolete]
	data OldEmptyData
	{
	}

	/// An old DTO.
	data OldData
	{
		/// An old field.
		[obsolete]
		old: string;

		[obsolete]
		older: string;
	}

	/// Some old values.
	enum OldValues
	{
		/// An old value.
		[obsolete]
		old,

		[obsolete]
		older,
	}

	/// Some old errors.
	errors OldErrors
	{
		/// An old error.
		[obsolete]
		old,

		[obsolete]
		older,
	}

	data snake_data
	{
		snake_field: string;
	}

	enum snake_enum
	{
		snake_value,
	}

	enum snake_error
	{
		snake_value,
	}

	method snake_method
	{
		snake_field: string;
	}:
	{
		snake_field: string;
	}

	/// An external DTO
	[csharp(namespace: "EdgeCases.ExternTypes")]
	extern data ExternalData;

	/// An external enum
	[csharp(namespace: "EdgeCases.ExternTypes")]
	extern enum ExternalEnum;

	/// A DTO that uses external types
	data DataWithExternalTypes
	{
		foo: ExternalData;
		bar: ExternalEnum;
	}

	method misc
	{
		[http(from: "query")]
		q: string;

		f: nullable<string>;
	}:
	{
	}
}
