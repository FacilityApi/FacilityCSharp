// DO NOT EDIT: generated by fsdgencsharp
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using System.Net.Http;
using Facility.Core;
using Facility.Core.Http;
using Newtonsoft.Json.Linq;

#pragma warning disable 612, 618 // member is obsolete

namespace Facility.TestServerApi.Http
{
	/// <summary>
	/// API for a Facility test server.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public static partial class TestServerApiHttpMapping
	{
		/// <summary>
		/// Gets API information.
		/// </summary>
		public static readonly HttpMethodMapping<GetApiInfoRequestDto, GetApiInfoResponseDto> GetApiInfoMapping =
			new HttpMethodMapping<GetApiInfoRequestDto, GetApiInfoResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Get,
				Path = "/",
				ResponseMappings =
				{
					new HttpResponseMapping<GetApiInfoResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(GetApiInfoResponseDto),
					}.Build(),
				},
			}.Build();

		/// <summary>
		/// Creates a new widget.
		/// </summary>
		public static readonly HttpMethodMapping<CreateWidgetRequestDto, CreateWidgetResponseDto> CreateWidgetMapping =
			new HttpMethodMapping<CreateWidgetRequestDto, CreateWidgetResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/widgets",
				ValidateRequest = request =>
				{
					if (request.Widget == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("widget"));
					return ServiceResult.Success();
				},
				RequestBodyType = typeof(WidgetDto),
				GetRequestBody = request => request.Widget,
				CreateRequest = body => new CreateWidgetRequestDto { Widget = (WidgetDto) body },
				ResponseMappings =
				{
					new HttpResponseMapping<CreateWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 201,
						ResponseBodyType = typeof(WidgetDto),
						MatchesResponse = response => response.Widget != null,
						GetResponseBody = response => response.Widget,
						CreateResponse = body => new CreateWidgetResponseDto { Widget = (WidgetDto) body },
					}.Build(),
				},
				GetResponseHeaders = response =>
					new Dictionary<string, string>
					{
						{ "Location", response.Url },
						{ "eTag", response.ETag },
					},
				SetResponseHeaders = (response, headers) =>
				{
					string headerUrl;
					headers.TryGetValue("Location", out headerUrl);
					response.Url = headerUrl;
					string headerETag;
					headers.TryGetValue("eTag", out headerETag);
					response.ETag = headerETag;
					return response;
				},
			}.Build();

		/// <summary>
		/// Gets the specified widget.
		/// </summary>
		public static readonly HttpMethodMapping<GetWidgetRequestDto, GetWidgetResponseDto> GetWidgetMapping =
			new HttpMethodMapping<GetWidgetRequestDto, GetWidgetResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Get,
				Path = "/widgets/{id}",
				ValidateRequest = request =>
				{
					if (request.Id == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("id"));
					return ServiceResult.Success();
				},
				GetUriParameters = request =>
					new Dictionary<string, string>
					{
						{ "id", request.Id == null ? null : request.Id.Value.ToString(CultureInfo.InvariantCulture) },
					},
				SetUriParameters = (request, parameters) =>
				{
					string queryParameterId;
					parameters.TryGetValue("id", out queryParameterId);
					request.Id = ServiceDataUtility.TryParseInt32(queryParameterId);
					return request;
				},
				GetRequestHeaders = request =>
					new Dictionary<string, string>
					{
						{ "If-None-Match", request.IfNotETag },
					},
				SetRequestHeaders = (request, headers) =>
				{
					string headerIfNotETag;
					headers.TryGetValue("If-None-Match", out headerIfNotETag);
					request.IfNotETag = headerIfNotETag;
					return request;
				},
				ResponseMappings =
				{
					new HttpResponseMapping<GetWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(WidgetDto),
						MatchesResponse = response => response.Widget != null,
						GetResponseBody = response => response.Widget,
						CreateResponse = body => new GetWidgetResponseDto { Widget = (WidgetDto) body },
					}.Build(),
					new HttpResponseMapping<GetWidgetResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 304,
						MatchesResponse = response => response.NotModified.GetValueOrDefault(),
						CreateResponse = body => new GetWidgetResponseDto { NotModified = true },
					}.Build(),
				},
				GetResponseHeaders = response =>
					new Dictionary<string, string>
					{
						{ "eTag", response.ETag },
					},
				SetResponseHeaders = (response, headers) =>
				{
					string headerETag;
					headers.TryGetValue("eTag", out headerETag);
					response.ETag = headerETag;
					return response;
				},
			}.Build();

		/// <summary>
		/// Finishes a client test.
		/// </summary>
		public static readonly HttpMethodMapping<FinishTestRequestDto, FinishTestResponseDto> FinishTestMapping =
			new HttpMethodMapping<FinishTestRequestDto, FinishTestResponseDto>.Builder
			{
				HttpMethod = HttpMethod.Post,
				Path = "/finishTest",
				ValidateRequest = request =>
				{
					if (request.Response == null)
						return ServiceResult.Failure(ServiceErrors.CreateRequestFieldRequired("response"));
					return ServiceResult.Success();
				},
				RequestBodyType = typeof(JObject),
				GetRequestBody = request => request.Response,
				CreateRequest = body => new FinishTestRequestDto { Response = (JObject) body },
				ResponseMappings =
				{
					new HttpResponseMapping<FinishTestResponseDto>.Builder
					{
						StatusCode = (HttpStatusCode) 200,
						ResponseBodyType = typeof(FinishTestResponseDto),
					}.Build(),
				},
			}.Build();
	}
}
