// DO NOT EDIT: generated by fsdgencsharp
using System;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core.Http;

namespace Facility.TestServerApi.Http
{
	/// <summary>
	/// API for a Facility test server.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public sealed partial class TestServerApiHttpHandler : ServiceHttpHandler
	{
		/// <summary>
		/// Creates the handler.
		/// </summary>
		public TestServerApiHttpHandler(ITestServerApi service, ServiceHttpHandlerSettings settings)
			: base(settings)
		{
			if (service == null)
				throw new ArgumentNullException("service");

			m_service = service;
		}

		/// <summary>
		/// Attempts to handle the HTTP request.
		/// </summary>
		public override async Task<HttpResponseMessage> TryHandleHttpRequestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return await AdaptTask(TryHandleGetApiInfoAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleFinishTestAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleCreateWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleGetWidgetAsync(httpRequest, cancellationToken)).ConfigureAwait(true);
		}

		/// <summary>
		/// Gets API information.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetApiInfoAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(TestServerApiHttpMapping.GetApiInfoMapping, httpRequest, m_service.GetApiInfoAsync, cancellationToken);
		}

		/// <summary>
		/// Creates a new widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleCreateWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(TestServerApiHttpMapping.CreateWidgetMapping, httpRequest, m_service.CreateWidgetAsync, cancellationToken);
		}

		/// <summary>
		/// Gets the specified widget.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleGetWidgetAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(TestServerApiHttpMapping.GetWidgetMapping, httpRequest, m_service.GetWidgetAsync, cancellationToken);
		}

		/// <summary>
		/// Finishes a client test.
		/// </summary>
		public Task<HttpResponseMessage> TryHandleFinishTestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(TestServerApiHttpMapping.FinishTestMapping, httpRequest, m_service.FinishTestAsync, cancellationToken);
		}

		readonly ITestServerApi m_service;
	}
}
