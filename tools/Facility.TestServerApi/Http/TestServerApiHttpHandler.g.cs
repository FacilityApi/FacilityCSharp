// DO NOT EDIT: generated by fsdgencsharp
using System;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core.Http;

namespace Facility.TestServerApi.Http
{
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public sealed partial class TestServerApiHttpHandler : ServiceHttpHandler
	{
		/// <summary>
		/// Creates the handler.
		/// </summary>
		public TestServerApiHttpHandler(ITestServerApi service, ServiceHttpHandlerSettings settings)
			: base(settings)
		{
			if (service == null)
				throw new ArgumentNullException("service");

			m_service = service;
		}

		/// <summary>
		/// Attempts to handle the HTTP request.
		/// </summary>
		public override async Task<HttpResponseMessage> TryHandleHttpRequestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return await AdaptTask(TryHandleGetApiInfoAsync(httpRequest, cancellationToken)).ConfigureAwait(true);
		}

		public Task<HttpResponseMessage> TryHandleGetApiInfoAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return TryHandleServiceMethodAsync(TestServerApiHttpMapping.GetApiInfoMapping, httpRequest, m_service.GetApiInfoAsync, cancellationToken);
		}

		readonly ITestServerApi m_service;
	}
}
