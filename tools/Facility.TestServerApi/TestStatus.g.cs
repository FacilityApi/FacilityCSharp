// DO NOT EDIT: generated by fsdgencsharp
using System;
using Facility.Core;
using Newtonsoft.Json;

namespace Facility.TestServerApi
{
	/// <summary>
	/// The status of a test.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	[JsonConverter(typeof(TestStatusJsonConverter))]
	public partial struct TestStatus : IEquatable<TestStatus>
	{
		/// <summary>
		/// The test passed.
		/// </summary>
		public static readonly TestStatus Pass = new TestStatus("pass");

		/// <summary>
		/// The test failed.
		/// </summary>
		public static readonly TestStatus Fail = new TestStatus("fail");

		/// <summary>
		/// Creates an instance.
		/// </summary>
		public TestStatus(string value)
		{
			m_value = value;
		}

		/// <summary>
		/// Converts the instance to a string.
		/// </summary>
		public override string ToString()
		{
			return m_value ?? "";
		}

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public bool Equals(TestStatus other)
		{
			return StringComparer.OrdinalIgnoreCase.Equals(ToString(), other.ToString());
		}

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public override bool Equals(object obj)
		{
			return obj is TestStatus && Equals((TestStatus) obj);
		}

		/// <summary>
		/// Gets the hash code.
		/// </summary>
		public override int GetHashCode()
		{
			return StringComparer.OrdinalIgnoreCase.GetHashCode(ToString());
		}

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public static bool operator ==(TestStatus left, TestStatus right)
		{
			return left.Equals(right);
		}

		/// <summary>
		/// Checks for inequality.
		/// </summary>
		public static bool operator !=(TestStatus left, TestStatus right)
		{
			return !left.Equals(right);
		}

		/// <summary>
		/// Returns true if the instance is equal to one of the defined values.
		/// </summary>
		public bool IsDefined()
		{
			return Equals(Pass) ||
				Equals(Fail);
		}

		/// <summary>
		/// Used for JSON serialization.
		/// </summary>
		public sealed class TestStatusJsonConverter : ServiceEnumJsonConverter<TestStatus>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override TestStatus CreateCore(string value)
			{
				return new TestStatus(value);
			}
		}

		readonly string m_value;
	}
}
