// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Facility.Core;

namespace EdgeCases
{
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	[Newtonsoft.Json.JsonConverter(typeof(SnakeEnumJsonConverter))]
	[System.Text.Json.Serialization.JsonConverter(typeof(SnakeEnumSystemTextJsonConverter))]
	public partial struct SnakeEnum : IEquatable<SnakeEnum>
	{
		public static readonly SnakeEnum SnakeValue = new SnakeEnum(Strings.SnakeValue);

		/// <summary>
		/// Creates an instance.
		/// </summary>
		public SnakeEnum(string value) => m_value = value;

		/// <summary>
		/// Converts the instance to a string.
		/// </summary>
		public override string ToString() => m_value != null && s_valueCache.TryGetValue(m_value, out var cachedValue) ? cachedValue : m_value ?? "";

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public bool Equals(SnakeEnum other) => StringComparer.OrdinalIgnoreCase.Equals(m_value ?? "", other.m_value ?? "");

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public override bool Equals(object? obj) => obj is SnakeEnum && Equals((SnakeEnum) obj);

		/// <summary>
		/// Gets the hash code.
		/// </summary>
		public override int GetHashCode() => StringComparer.OrdinalIgnoreCase.GetHashCode(m_value ?? "");

		/// <summary>
		/// Checks for equality.
		/// </summary>
		public static bool operator ==(SnakeEnum left, SnakeEnum right) => left.Equals(right);

		/// <summary>
		/// Checks for inequality.
		/// </summary>
		public static bool operator !=(SnakeEnum left, SnakeEnum right) => !left.Equals(right);

		/// <summary>
		/// Returns true if the instance is equal to one of the defined values.
		/// </summary>
		public bool IsDefined() => m_value != null && s_valueCache.ContainsKey(m_value);

		/// <summary>
		/// Returns all of the defined values.
		/// </summary>
		public static IReadOnlyList<SnakeEnum> GetValues() => s_values;

		/// <summary>
		/// Provides string constants for defined values.
		/// </summary>
		public static class Strings
		{
			public const string SnakeValue = "snake_value";
		}

		/// <summary>
		/// Used for serialization.
		/// </summary>
		public sealed class SnakeEnumJsonConverter : ServiceEnumJsonConverter<SnakeEnum>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override SnakeEnum CreateCore(string value) => new SnakeEnum(value);
		}

		/// <summary>
		/// Used for serialization.
		/// </summary>
		public sealed class SnakeEnumSystemTextJsonConverter : ServiceEnumSystemTextJsonConverter<SnakeEnum>
		{
			/// <summary>
			/// Creates the value from a string.
			/// </summary>
			protected override SnakeEnum CreateCore(string value) => new SnakeEnum(value);
		}

		private static readonly ReadOnlyCollection<SnakeEnum> s_values = new ReadOnlyCollection<SnakeEnum>(
			new[]
			{
				SnakeValue,
			});

		private static readonly IReadOnlyDictionary<string, string> s_valueCache = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
		{
			{ Strings.SnakeValue, Strings.SnakeValue },
		};

		private readonly string m_value;
	}
}
